{"version":3,"sources":["components/MakeTodo/MakeTodo.jsx","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodosFilter/TodosFilter.jsx","App.js","index.js"],"names":["MakeTodo","setTodoList","useState","todo","setTodo","onSubmit","event","preventDefault","prevTodos","id","Date","title","trimRight","completed","addTodo","type","className","placeholder","value","onChange","target","trimLeft","TodoItem","item","todoList","status","setStatus","editing","setEditing","todoText","setTodoText","handleBlur","trim","map","deleteTodo","itemId","filter","useEffect","classnames","checked","onDoubleClick","onClick","autoFocus","onKeyDown","key","onBlur","TodoList","filteredTodos","TodosFilter","setFilter","FILTERS","href","selected","all","active","App","toggleAll","setToggleAll","localStorage","JSON","parse","getItem","setItem","stringify","useMemo","notCompleted","length","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e98ce49.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const MakeTodo = ({ setTodoList }) => {\n  const [todo, setTodo] = useState('');\n\n  const addTodo = (event) => {\n    event.preventDefault();\n    if (!todo) {\n      return;\n    }\n\n    setTodoList(prevTodos => (\n      [\n        ...prevTodos,\n        { id: +new Date(), title: todo.trimRight(), completed: false },\n      ]\n    ));\n    setTodo('');\n  };\n\n  return (\n    <form\n      onSubmit={event => addTodo(event)}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={todo}\n        onChange={event => setTodo(event.target.value.trimLeft())}\n      />\n    </form>\n  );\n};\n\nMakeTodo.propTypes = {\n  setTodoList: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const TodoItem = ({\n  item,\n  setTodoList,\n  todoList,\n}) => {\n  const [status, setStatus] = useState(item.completed);\n  const [editing, setEditing] = useState(false);\n  const [todoText, setTodoText] = useState(item.title);\n\n  const handleKeyDown = (key) => {\n    if (key === 'Escape') {\n      setTodoText(item.title);\n      setEditing(false);\n    }\n\n    if (key === 'Enter') {\n      handleBlur();\n    }\n  };\n\n  const handleBlur = () => {\n    if (!todoText) {\n      deleteTodo(item.id);\n      setEditing(false);\n    } else {\n      setTodoText(todoText.trim());\n      setTodoList(prevTodos => prevTodos.map((todo) => {\n        if (todo.id === item.id) {\n          return { ...todo, title: todoText };\n        }\n\n        return todo;\n      }));\n      setEditing(false);\n    }\n  };\n\n  const changeStatus = () => {\n    setTodoList(prevTodos => prevTodos.map((todo) => {\n      if (todo.id === item.id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    }));\n    setStatus(!status);\n  };\n\n  const deleteTodo = (itemId) => {\n    setTodoList(todoList.filter(todo => todo.id !== itemId));\n  };\n\n  useEffect(() => {\n    setStatus(item.completed);\n    setTodoList([...todoList]);\n  }, [item.completed]);\n\n  return (\n    <li className={classnames({\n      completed: status,\n      editing,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={status}\n          onChange={changeStatus}\n        />\n        <label\n          onDoubleClick={() => setEditing(true)}\n        >\n          {item.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(item.id)}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          value={todoText}\n          onChange={event => setTodoText(event.target.value.trimLeft())}\n          onKeyDown={event => handleKeyDown(event.key)}\n          onBlur={handleBlur}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  item: PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todoList,\n  setTodoList,\n  filteredTodos,\n}) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        setTodoList={setTodoList}\n        todoList={todoList}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodoList: PropTypes.func.isRequired,\n  filteredTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({ setFilter, FILTERS, filter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classnames({ selected: filter === FILTERS.all })}\n        onClick={() => setFilter(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classnames({ selected: filter === FILTERS.active })}\n        onClick={() => setFilter(FILTERS.active)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classnames({ selected: filter === FILTERS.completed })}\n        onClick={() => setFilter(FILTERS.completed)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  FILTERS: PropTypes.objectOf(PropTypes.string).isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { MakeTodo } from './components/MakeTodo/index';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nconst FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filter, setFilter] = useState(FILTERS.all);\n\n  useEffect(() => {\n    if (localStorage.todoList) {\n      setTodoList(JSON.parse(localStorage.getItem('todoList')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todoList', JSON.stringify(todoList));\n  }, [todoList]);\n\n  const filteredTodos = useMemo(() => todoList.filter((todo) => {\n    switch (filter) {\n      case FILTERS.active:\n        return todo.completed === false;\n      case FILTERS.completed:\n        return todo.completed === true;\n      default:\n        return todo;\n    }\n  }), [filter, todoList]);\n\n  const changeToggleAll = () => {\n    setTodoList(\n      todoList.map(todo => ({\n        ...todo,\n        completed: !toggleAll,\n      })),\n    );\n  };\n\n  const notCompleted = todoList.filter(item => !item.completed);\n\n  useEffect(() => {\n    if (notCompleted.length === 0) {\n      setToggleAll(true);\n    } else {\n      setToggleAll(false);\n    }\n  }, [notCompleted]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <MakeTodo setTodoList={setTodoList} />\n      </header>\n\n      {!!todoList.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={toggleAll}\n              onChange={changeToggleAll}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              todoList={todoList}\n              setTodoList={setTodoList}\n              filteredTodos={filteredTodos}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {notCompleted.length}\n              {notCompleted.length > 1 || notCompleted.length === 0\n                ? ' todos left'\n                : ' todo left'}\n            </span>\n\n            <TodosFilter\n              setFilter={setFilter}\n              FILTERS={FILTERS}\n              filter={filter}\n            />\n\n            {notCompleted.length !== todoList.length && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setTodoList(notCompleted)}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}